import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from mysql.connector import MySQLConnection

from keyboards.default import default_keyboards
from keyboards.inline import dynamic
from states.states import *
from loader import dp, bot
from data.config import ADMINS
from keyboards.default.default_keyboards import *
from utils.db_api.python_mysql import read_db_config


@dp.message_handler(lambda message: message.text in get_buttons_text_from_menu(admin_menu),
                    state="*",
                    content_types=ContentType.ANY)
async def admin_head_menu(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    msgtext = msg.text
    # CONNECT TO DATABASE
    dbconfig = read_db_config()
    conn = MySQLConnection(**dbconfig)
    c = conn.cursor(buffered=True)
    now_state = await state.get_state()
    now_state = '' if not now_state else now_state
    logging.info(f'{user_id}; {msgtext}')
    if user_id in ADMINS:
        if msgtext in (button_to_admin.text, button_main_menu.text):
            await bot.send_message(user_id,
                                   f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é ‚§µ',
                                   reply_markup=admin_menu)

        elif msgtext == button_to_user.text:
            await bot.send_message(user_id,
                                   f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é ‚§µ',
                                   reply_markup=admin_result)

        elif msgtext == button_payments.text:
            await bot.send_message(user_id,
                                   f'–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ‚§µ',
                                   reply_markup=default_keyboards.payments_menu)

        elif button_new_mailing.text == msgtext:
            await bot.send_message(user_id,
                                   '*–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ *üì¢\n\n'
                                   '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ *{0}*\n\n'
                                   '–î–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–∫–æ–π-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start\n\n'
                                   '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *{1}* –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏, –∞ *{2}* –¥–ª—è –Ω–∞—á–∞–ª–∞'
                                   ' —Ä–∞—Å—Å—ã–ª–∫–∏\n\n'
                                   '–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É *HTML*, —Ç–æ –µ—Å—Ç—å:\n'
                                   '<b>*–ñ–∏—Ä–Ω—ã–π*</b>\n'
                                   '<i>_–ö—É—Ä—Å–∏–≤_</i>\n'
                                   '<pre>`–ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π`</pre>\n'
                                   '<a href="—Å—Å—ã–ª–∫–∞-–Ω–∞-—Å–∞–π—Ç">[–û–±–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –≤ —Å—Å—ã–ª–∫—É](test.ru)</a>'.format(
                                       button_main_menu.text, button_mail_preview.text,
                                       button_mail_start.text
                                   ),
                                   parse_mode="markdown",
                                   reply_markup=mailing_menu)

        elif button_commands.text == msgtext:
            inline_kb = await dynamic.get_commands_menu(c)
            await bot.send_message(user_id,
                                   f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤',
                                   reply_markup=inline_kb)
    c.close()
    conn.close()
